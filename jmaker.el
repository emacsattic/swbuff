;; @(#) jmaker.el -- Java Makefile generator
;; @(#) $Id: jmaker.el,v 1.14 2000/03/31 08:19:31 david_ponce Exp $

;; This file is not part of Emacs

;; Copyright (C) 1998, 2000 by David Ponce
;; Author:       David Ponce <david@dponce.com>
;; Maintainer:   David Ponce <david@dponce.com>
;; Created:      July 22 1998

;; LCD Archive Entry:
;; jmaker|David Ponce|<david@dponce.com>|
;; Java Makefile generator|
;; $Date: 2000/03/31 08:19:31 $|$Revision: 1.14 $|~/misc/jmaker.el|

;; COPYRIGHT NOTICE
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

;;; Description:
;;
;; This package is an add-on to the Java Development Environment
;; (JDE) for Emacs. It automatically generates Makefiles to improve
;; Java projects building using make. The default Makefile template
;; provided uses the java compiler and its options from JDE and generate
;; targets to compile all .java files in the current directory.
;;
;; jmaker can generate "meta Makefiles" too, which could be used to
;; build sets of projects. "meta Makefiles" recursively call make on
;; Makefiles found in a directory tree.

;;; Installation:
;;
;; Put the following in your .emacs file:
;;   (require 'jmaker)
;;
;; As jmaker does (require 'jde) you can omit it in your .emacs.

;;; Usage:
;;
;; While editing a Java file use:
;;   M-x `jmaker-generate-makefile' to generate a new Makefile in the current
;;   directory. If an old one already exists the command requires confirmation
;;   to overwrite it.
;;
;; Anywhere use:
;;   M-x `jmaker-generate-meta-makefile' to generate a new meta Makefile in the
;;   asked directory. If an old meta Makefile already exists the command requires
;;   confirmation to overwrite it.
;; 
;;   M-x `jmaker-generate-all-makefiles' to generate new Makefiles in the
;;   asked directory tree. A dialog allows you to select which Makefiles
;;   will be created or overwritten.
;; 
;; CAUTION: jmaker doesn't take back any modifications you could have made
;; to an existing Makefile!
;;
;; To build a project with make you can use the `compile' command or the
;; `jde-build' command if `jde-build-use-make' is set to a non-nil value.
;; To build a set of projects you can use the `compile' command and give it
;; the file name of the meta Makefile (make [others options] -f Makefile.meta)
;;
;; A JMaker menu item is added to the menu bar in jde-mode.

;;; Customization:
;;
;;   M-x `jmaker-customize' to change jmaker options.

;;; Support:
;;
;; Latest version of jmaker can be downloaded from: <http://www.dponce.com/>
;;
;; Any comments, suggestions, bug reports or upgrade requests are welcome.
;; Please send them to David Ponce at <david@dponce.com>
;;
;; I currently develop and test jmaker with NTEmacs 20.6.1 and
;; Cygwin B20.1 tools (bash, make) under MS Windows NT 4 WKS SP5.
;; jmaker requires the JDE package (works with 2.1.5 and latest 2.1.6 betas).

;;; Code:

(require 'jde)
(require 'tempo)
(require 'compile)
(require 'widget)
(eval-when-compile
  (require 'wid-edit))

(defconst jmaker-version "$Revision: 1.14 $"
  "jmaker version tag.")

(defgroup jmaker nil
  "Java Makefile generator"
  :group 'tools
  :prefix "jmaker-")

(defcustom jmaker-makefile-buffer-template
  '(
    "\"####\" 'n"
    "\"#### Java Makefile automatically generated by jmaker \""
    "(jmaker-version-number) 'n"
    "\"#### Creation date: \" (current-time-string) 'n"
    "\"####\" 'n"
    "'n"
    "\"#### Java compiler settings\" 'n"
    "\"JAVAC       = \" jde-compiler  'n"
    "\"JAVAC_FLAGS = \" (jde-get-compile-options) 'n"
    "'n"
    "\"#### Build Rules\" 'n"
    "\"%.class: %.java\" 'n"
    "\"\\t$(JAVAC) $(JAVAC_FLAGS) $<\" 'n"
    "'n"
    "\"#### Global target\" 'n"
    "(jmaker-all-target)"
    "'n"
    "\"#### Single targets\" 'n"
    "(jmaker-file-targets)"
    "'n"
    "\"#### Cleanup\" 'n"
    "\"clean:\" 'n"
    "\"\\t$(RM) *.class\" 'n"
    "'n"
    "\"#### Rebuild\" 'n"
    "\"build:\\tclean all\" 'n"
    "'n"
    "\"#### Usage\" 'n"
    "\"help:\" 'n"
    "\"\\t@echo \\\"Usage: make [all|<single target>|clean|build|help]\\\"\" 'n"
    "\"\\t@echo \\\"  all             - build all as needed (default)\\\"\" 'n"
    "\"\\t@echo \\\"  <single target> - build the given file as needed\\\"\" 'n"
    "\"\\t@echo \\\"  clean           - remove all .class files\\\"\" 'n"
    "\"\\t@echo \\\"  build           - build all inconditionnally\\\"\" 'n"
    "\"\\t@echo \\\"  help            - display this help\\\"\" 'n"
    "'n"
    )
  "*Template for Java Makefile.
Setting this variable defines a template instantiation
command `jmaker-insert-makefile', as a side-effect."
  :group 'jmaker
  :type '(repeat string)
  :set '(lambda (sym val)
          (defalias 'jmaker-insert-makefile
            (tempo-define-template "jmaker-makefile-buffer-template"
                                   (jde-gen-read-template val)
                                   nil
                                   "Insert a Java Makefile in the current buffer."))
          (set-default sym val)))

(defcustom jmaker-meta-makefile-buffer-template
  '(
    "\"####\" 'n"
    "\"#### Java meta Makefile automatically generated by jmaker \""
    "(jmaker-version-number) 'n"
    "\"#### Creation date: \" (current-time-string) 'n"
    "\"####\" 'n"
    "'n"
    "\"#### Sub-Makefiles targets\" 'n"
    "(jmaker-sub-makefile-targets)"
    "'n"
    "\"#### Usage\" 'n"
    "\"help:\" 'n"
    "\"\\t@echo \\\"Usage: make [all|<single target>|help]\\\"\" 'n"
    "\"\\t@echo \\\"  all             - build all as needed (default)\\\"\" 'n"
    "\"\\t@echo \\\"  <single target> - build the given target as needed\\\"\" 'n"
    "\"\\t@echo \\\"  help            - display this help\\\"\" 'n"
    "'n"
    )
  "*Template for Java meta Makefile.
Setting this variable defines a template instantiation
command `jmaker-insert-meta-makefile', as a side-effect."
  :group 'jmaker
  :type '(repeat string)
  :set '(lambda (sym val)
          (defalias 'jmaker-insert-meta-makefile
            (tempo-define-template "jmaker-meta-makefile-buffer-template"
                                   (jde-gen-read-template val)
                                   nil
                                   "Insert a Java Makefile.meta in the current buffer."))
          (set-default sym val)))

;;;###autoload
(defun jmaker-customize ()
  "Show the jmaker customization options panel."
  (interactive)
  (customize-group "jmaker"))

(defun jmaker-version-number ()
  "Return jmaker version number."
  (string-match "[0123456789.]+" jmaker-version)
  (match-string 0 jmaker-version))

;;;###autoload
(defun jmaker-display-version ()
  "Display jmaker version."
  (interactive)
  (message "Using 'jmaker' version %s." (jmaker-version-number)))

(defun jmaker-get-java-names ()
  "Return a list of all java file names without extension in the current directory."
  (mapcar 'file-name-sans-extension
          (directory-files default-directory nil ".\\.java$")))

(defun jmaker-convert-directory-to-package (dir)
  "Convert the given directory DIR to a Java package form
by replacing '/' by '.' and removing extra '/' at end."
  (let* ((pkg (if (string= (substring dir -1) "/")
                  (substring dir 0 -1)
                (copy-sequence dir)))
         (n (length pkg))
         (i 0)
         (case-fold-search nil))
    (while (< i n)
      (and (char-equal ?/ (aref pkg i))
           (aset pkg i ?.))
      (setq i (1+ i)))
    pkg))

(defun jmaker-get-makefiles-in-tree (root)
  "Return the list of Makefiles found in the ROOT directory tree.
Each Makefile path is relative to ROOT."
  (message "Searching Makefiles...")
  (let ((makefile-list
         (nconc (and (file-directory-p root)
                     (file-readable-p (concat root "/Makefile"))
                     '("./Makefile"))
                (jmaker-get-makefiles-in-tree-aux root root))))
    (message "Searching Makefiles...Done")
    makefile-list))

(defun jmaker-get-makefiles-in-tree-aux (root dir)
  "Auxiliary function used by `jmaker-get-makefiles-in-tree'.
DIR is a subdirectory in ROOT tree."
  (apply 'nconc
         (mapcar
          '(lambda (entry)
             (and (not (string= (substring entry -1) "."))
                  (file-directory-p entry)
                  (nconc (and (file-exists-p (concat entry "/Makefile"))
                              (list (concat (file-relative-name entry root)
                                            "/Makefile")))
                         (jmaker-get-makefiles-in-tree-aux root entry))))
          (directory-files dir t))))

(defun jmaker-all-target ()
  "Returns a Makefile string for the \"all\" target. It is build with the name
of all .java files in the current directory. If the current directory contains
Sample1.java and Sample2.java `jmaker-all-target' returns:

all: \
  Sample1 \
  Sample2

"
  (concat "all:\t\\\n"
          (mapconcat '(lambda (name) (concat "\t" name))
                     (jmaker-get-java-names)
                     " \\\n")
          "\n"))

(defun jmaker-file-targets ()
  "Return a Makefile string for java file targets. It is build with the name
of all .java files in the current directory. If the current directory contains
Sample1.java and Sample2.java `jmaker-file-targets' returns:

Sample1: Sample1.class
Sample2: Sample2.class

"
  (mapconcat '(lambda (name) (concat name ":\t" name ".class\n"))
             (jmaker-get-java-names)
             ""))

(defun jmaker-sub-makefile-targets ()
  "Return a string which contains Makefile rules to recursively run make on all
Makefiles found in the `default-directory' tree. The result looks like the
following:

\"all: \
   test \
   test.essai1 \
   other

test: FORCE
  cd test; $(MAKE)

test.essai1: FORCE
  cd test/essai1; $(MAKE)

other: FORCE
  cd other; $(MAKE)

FORCE:
\"
"
  (let ((subdir-list (mapcar '(lambda (x) (directory-file-name (file-name-directory x)))
                              (jmaker-get-makefiles-in-tree default-directory))))
    (concat "all:\t\\\n"
            (mapconcat '(lambda (dir)
                          (concat "\t" (jmaker-convert-directory-to-package dir)))
                       subdir-list
                       " \\\n")
            "\n\n"
            (mapconcat '(lambda (dir)
                          (concat (jmaker-convert-directory-to-package dir)
                                  ":\tFORCE\n\tcd " dir "; $(MAKE)\n"))
                       subdir-list
                       "\n")
            "\nFORCE:\n"
            )))

(defun jmaker-makefile-generator ()
  "Build and insert a Makefile contents in the current buffer.
Call `jde-load-project-file' to update the JDE project settings."
  (jde-load-project-file)
  (jmaker-insert-makefile))

(defalias 'jmaker-meta-makefile-generator 'jmaker-insert-meta-makefile)

(defun jmaker-generate-file-noselect (dir name generator &optional over)
  "Generate a file NAME in directory DIR and return the updated file buffer.
GENERATOR is the function used to generate the file in the current buffer.
If the file NAME already exists the command requires confirmation to overwrite it
unless OVER is non-nil."
  (let ((file (concat (file-name-as-directory dir) name)))
    (or over
        (and (file-exists-p file)
             (or (y-or-n-p (format "File `%s' exists; overwrite? " file))
                 (error "Canceled"))))
    (with-current-buffer (find-file-noselect file)
      (erase-buffer)
      ;; (jde-load-project-file)
      ;; (jmaker-insert-makefile)
      (funcall generator)
      (current-buffer))))

(defun jmaker-has-java-files-p (dir)
  "Return non-nil if DIR contains some .java files"
  (directory-files dir nil ".\\.java$"))

;; (defun jmaker-has-makefiles-p (dir)
;;   "Return non-nil if DIR contains some Makefiles"
;;   (directory-files dir nil "^Makefile$"))

(defun jmaker-generate-makefile-in-dir (dir)
  "Generate a Java Makefile file in directory DIR.
If the Makefile already exists it is overwritten."
  (with-current-buffer
      (jmaker-generate-file-noselect dir
                                     "Makefile"
                                     'jmaker-makefile-generator
                                     'overwrite)
    (save-buffer)
    (kill-buffer (current-buffer))))

(defvar jmaker-selected-makefiles nil
  "Used by `jmaker-select-makefile-list' to hold the list of Makefiles
to be generated.")

(defun jmaker-setup-selected-makefiles (root)
  "Initialize `jmaker-selected-makefiles' with the list of directories where
Makefiles could be generated, that is directories where .java files are found.
ROOT is the root of the directory tree scanned."
  (message "Scanning directories...")
  (setq jmaker-selected-makefiles nil)
  (jmaker-setup-selected-makefiles-aux root))

(defun jmaker-setup-selected-makefiles-aux (root)
  "Auxiliary function used by `jmaker-setup-selected-makefiles'."
  (let ((root (file-name-as-directory root)))
    (and (jmaker-has-java-files-p root)
         (add-to-list 'jmaker-selected-makefiles root))
    (mapcar '(lambda (f)
               (let ((entry (concat root f)))
                 (if (and (not (string= f "."))
                          (not (string= f ".."))
                          (file-directory-p entry))
                     (jmaker-setup-selected-makefiles-aux entry))))
            (directory-files root))))

(defun jmaker-select-makefile-action (widget &rest ignore)
  "Checkbox widget action used by `jmaker-select-makefile-list'
to select/unselect a Makefile."
  (let ((value (widget-get widget ':tag))
        (item (widget-get widget ':doc)))
    ;; if value is already in the selected items
    (if (memq value jmaker-selected-makefiles)
        ;; then remove it
        (progn
          (setq jmaker-selected-makefiles
                (delq value jmaker-selected-makefiles))
          (message "%s removed from selection." item))
      ;; else add it
      (progn
        (setq jmaker-selected-makefiles
              (nconc (list value) jmaker-selected-makefiles))
        (message "%s added to selection." item)))))
  
(defconst jmaker-select-makefile-dialog-header
  "Select/Unselect Makefiles to be generated by `jmaker'
in directory tree: %s

  (NEW)  indicates that this Makefile does not exist and will be created.
  (OVER) indicates that this Makefile exists and will be overwritten.

Click on Ok to generate or on Cancel to quit.\n\n"
  "`jmaker-select-makefile-list' dialog header.")

;;;###autoload
(defun jmaker-select-makefile-list (root)
  "Show a dialog which allows the user to [un]select the Makefile
to generate in the directory tree ROOT."
  (with-current-buffer (get-buffer-create "*jmaker-select-makefile-list*")
    (switch-to-buffer (current-buffer))
    (kill-all-local-variables)
    (let ((inhibit-read-only t))
      (erase-buffer))
    (let ((all (overlay-lists)))
      ;; Delete all the overlays.
      (mapcar 'delete-overlay (car all))
      (mapcar 'delete-overlay (cdr all)))
    
    ;; By default all Makefiles in ROOT will be generated. So, the 
    ;; `jmaker-selected-makefiles' list must be set.
    (jmaker-setup-selected-makefiles root)

    ;; Insert the dialog header
    (widget-insert (format jmaker-select-makefile-dialog-header root))

    ;; Insert the list of Makefiles as checkboxes
    (mapcar '(lambda (dir)
               (let ((item (concat dir "Makefile")))
                 (setq item (concat (file-relative-name item root)
                                    (if (file-exists-p item) " (OVER)" " (NEW)")))
                 (widget-create 'checkbox
                                :value  t ; selected checkbox
                                :format "%[%v%] %d"
                                :tag    dir
                                :doc    item
                                :notify 'jmaker-select-makefile-action)))
            jmaker-selected-makefiles)
    
    (widget-insert "\n\n")

    ;; Insert the Ok button
    (widget-create 'push-button
                   :notify (lambda (&rest ignore)
                             (if jmaker-selected-makefiles
                                 (progn
                                   (kill-buffer (current-buffer))
                                   (mapcar 'jmaker-generate-makefile-in-dir
                                           jmaker-selected-makefiles)
                                   (message "%S Makefile(s) generated"
                                            (length jmaker-selected-makefiles)))
                               (message "No Makefile selected.")))
                   "Ok")

    (widget-insert " ")

    ;; Insert the Cancel button
    (widget-create 'push-button
                   :notify (lambda (&rest ignore)
                             (kill-buffer (current-buffer))
                             (message "Command canceled."))
                   "Cancel")

    ;; Display the dialog
    (use-local-map widget-keymap)
    (widget-setup)))

;;;###autoload
(defun jmaker-generate-makefile ()
  "Generates a Java Makefile in the current directory.
If no .java files exist the command does nothing.
If the Makefile already exists the command requires confirmation to overwrite it."
  (interactive)
  (if (jmaker-has-java-files-p default-directory)
      (with-current-buffer
          (jmaker-generate-file-noselect default-directory
                                         "Makefile"
                                         'jmaker-makefile-generator)
        (makefile-mode)
        (goto-char (point-min))
        (switch-to-buffer (current-buffer)))
    (message "No .java file found in %s" default-directory)))

;;;###autoload
(defun jmaker-generate-all-makefiles (root)
  "Generate Java Makefiles in the ROOT directory tree. Display a dialog
to select subdirectories where a Makefile will be generated, that is
where .java file are found (see also `jmaker-select-makefile-list')."
  (interactive "DDirectory: ")
  (jmaker-select-makefile-list root))

;;;###autoload
(defun jmaker-generate-meta-makefile (root)
  "Generates a Makefile.meta file in directory ROOT used to recursively run
make on each Makefile found in ROOT directory tree.
TODO: If no Makefile is found the command does nothing.
If Makefile.meta already exists the command requires confirmation to overwrite it."
  (interactive "DDirectory: ")
  (if t ; TODO: (jmaker-has-makefiles-p root)
      (with-current-buffer
          (jmaker-generate-file-noselect root
                                         "Makefile.meta"
                                         'jmaker-meta-makefile-generator)
        (makefile-mode)
        (goto-char (point-min))
        (switch-to-buffer (current-buffer)))
    (message "No Makefile found in %s" root)))

(defvar jmaker-menu
  (list "JMaker"
        (list "New"
              ["Makefile..."          jmaker-generate-makefile t]
              ["Makefiles in tree..." jmaker-generate-all-makefiles t]
              ["Meta-makefile..."     jmaker-generate-meta-makefile t]
              )
        ["Options..."              jmaker-customize t]
        ["Make"                    compile t]
	      ["-"                       ignore nil]
        (concat "jmaker " (jmaker-version-number))
        )
  "Menu for jmaker.")

(require 'easymenu)
(easy-menu-do-define 'jmaker-menu jde-mode-map "Menu for jmaker." jmaker-menu)

(provide 'jmaker)

;;; Change History:

;;
;; $Log: jmaker.el,v $
;; Revision 1.14  2000/03/31 08:19:31  david_ponce
;; This is a major rewrite of jmaker to add the new
;; `jmaker-generate-all-makefiles' command.
;;
;; Thanks to "David Turland" <dtrurland@axarte.com> who has suggested
;; this enhancement.
;;
;; Revision 1.13  1999/07/05 21:29:17  ebat311
;; May be the jmaker menu works with XEmacs?
;;
;; Revision 1.12  1999-06-04 17:55:19+02  ebat311
;; Added a "Make" option to the menu  (GNU Emacs only)
;; to launch the standard `compile' command.
;;
;; Revision 1.11  1999-04-22 23:50:36+02  ebat311
;; Added `autoload' cookies.
;;
;; Revision 1.10  1998/11/27 09:23:51  ebat311
;; Compatibility issue. jmaker now has its own menu item on
;; the menu bar (GNU Emacs only!). This avoid compatibility
;; problem when the JDE menu structure change (as in 2.1.2).
;;
;; Revision 1.9  1998/10/20 10:05:21  ebat311
;; Have run `untabify' on the whole source (follows a remark from ricky@siemensdc.com).
;;
;; Revision 1.8  1998/10/08 15:40:33  ebat311
;; Usage comments added related to the new meta Makefiles feature.
;;
;; Revision 1.7  1998/10/05 21:34:55  ebat311
;; `jmaker-generate-...' commands now generate file buffers and
;; require confirmation if the file already exists.
;;
;; Revision 1.6  1998/10/05 21:17:22  ebat311
;; Added super Makefile generation.
;; Some coding optimized and simplified.
;;
;; Revision 1.6  1998/09/29 22:34:45  ebat311
;; Outdated (renamed to 'C:\RCS\C\users\dpe\emacs\jmaker.el,v').
;;
;; Revision 1.5  1998/09/29 22:34:18  ebat311
;; New version-number management functions.
;;
;; Revision 1.4  1998/09/28 22:54:19  ebat311
;; Copyright notice updated.
;;
;; Revision 1.3  1998/09/28 22:18:58  ebat311
;; Fixed an error in function `jmaker-version-number' which did not display
;; the version number.
;;
;; Revision 1.2  1998/09/15 11:26:55  ebat311
;; Added support for Emacs 20.3.1.
;; From Paul Kinnucan: "Emacs 20.3.1 fixes a bug in the derive
;; mode macro that caused the jde-mode hook variable to be named
;; `jde-mode-hooks' (note plural) instead of `jde-mode-hook' (singular),
;; which is customary."
;;
;; Revision 1.1  1998/07/22 13:48:17  ebat311
;; Initial revision
;;
;;

;;; jmaker.el ends here.
