;;; jmaker.el -- Java Makefile generator add-on to JDE.
;; $Revision: 1.10 $

;; Copyright (C) 1998 by David Ponce

;; Author: David Ponce <david.ponce@wanadoo.fr>
;; Maintainer: David Ponce <david.ponce@wanadoo.fr>
;; Keywords: java, tools

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

;;; Description:

;; This package is an add-on to the Java Development Environment
;; (JDE) for Emacs. It automatically generates Makefiles to improve
;; Java projects building using make. The default Makefile template
;; provided uses the java compiler and its options from JDE and generate
;; targets to compile all .java files in the current directory.
;;
;; jmaker can generate "meta Makefiles" too, which could be used to
;; build sets of projetcs. "meta Makefiles" recursively call make on
;; Makefiles found in a directory tree.

;;; Installation:

;; Put the following in your .emacs file:
;;   (require 'jmaker)
;;
;; As jmaker does (require 'jde) you can omit it in your .emacs.

;;; Usage:

;; While editing a Java file use:
;;   M-x `jmaker-generate-makefile' to generate a new Makefile in the current
;;   directory. If an old one already exists the command requires confirmation
;;   to overwrite it.
;;
;;   M-x `jmaker-generate-meta-makefile' to generate a new meta Makefile in the
;;   asked directory. If an old meta Makefile already exists the command requires
;;   confirmation to overwrite it.
;; 
;; CAUTION: jmaker doesn't take back any modifications you could have made
;; to an existing Makefile!
;;
;; To build a project with make you can use the `compile' command or the
;; `jde-build' command if `jde-build-use-make' is set to a non-nil value.
;; To build a set of projects you can use the `compile' command and give it
;; the file name of the meta Makefile (make [other options] -f Makefile.meta)
;;
;; A Jmaker menu item is added to the menu bar in jde-mode (only for FSF emacs).

;;; Customization:

;; While editing a Java file use:
;;   M-x `jmaker-customize' to change jmaker options

;;; Support:

;; Any comments, suggestions, bug reports or upgrade requests are welcome.
;; Please send them to David Ponce at david.ponce@wanadoo.fr.
;;
;; This version of jmaker is developed and tested with NTEmacs 19.34.6 and
;; Cygnus GNU-Win32 B18 tools (bash, make) under MS Windows NT 4 WKS SP3.
;; jmaker requires the "jde" package (works with jde 2.0.7, 2.0.8 and
;; probably might work with slightly earlier and later versions).
;; Please, let me know if jmaker work with other OS and versions of GNU Emacs.

;;; Code:

(require 'jde)
(require 'tempo)

(defconst jmaker-version "$Revision: 1.10 $"
  "jmaker version number.")

(defgroup jmaker nil
  "Java Makefile Maker Environment"
  :group 'tools
  :prefix "jmaker-")

(defcustom jmaker-makefile-buffer-template
  '(
    "\"####\" 'n"
    "\"#### Java Makefile automatically generated by jmaker \""
    "(jmaker-version-number) 'n"
    "\"#### Creation date: \" (current-time-string) 'n"
    "\"####\" 'n"
    "'n"
    "\"#### Java compiler settings\" 'n"
    "\"JAVAC       = \" jde-compiler  'n"
    "\"JAVAC_FLAGS = \" (jde-get-compile-options) 'n"
    "'n"
    "\"#### Build Rules\" 'n"
    "\"%.class: %.java\" 'n"
    "\"\\t$(JAVAC) $(JAVAC_FLAGS) $<\" 'n"
    "'n"
    "\"#### Global target\" 'n"
    "(jmaker-all-target)"
    "'n"
    "\"#### Single targets\" 'n"
    "(jmaker-file-targets)"
    "'n"
    "\"#### Cleanup\" 'n"
    "\"clean:\" 'n"
    "\"\\t$(RM) *.class\" 'n"
    "'n"
    "\"#### Rebuild\" 'n"
    "\"build:\\tclean all\" 'n"
    "'n"
    "\"#### Usage\" 'n"
    "\"help:\" 'n"
    "\"\\t@echo \\\"Usage: make [all|<single target>|clean|build|help]\\\"\" 'n"
    "\"\\t@echo \\\"  all             - build all as needed (default)\\\"\" 'n"
    "\"\\t@echo \\\"  <single target> - build the given file as needed\\\"\" 'n"
    "\"\\t@echo \\\"  clean           - remove all .class files\\\"\" 'n"
    "\"\\t@echo \\\"  build           - build all inconditionnally\\\"\" 'n"
    "\"\\t@echo \\\"  help            - display this help\\\"\" 'n"
    "'n"
    )
  "*Template for Java Makefile.
Setting this variable defines a template instantiation
command `jmaker-insert-makefile', as a side-effect."
  :group 'jmaker
  :type '(repeat string)
  :set '(lambda (sym val)
          (defalias 'jmaker-insert-makefile
            (tempo-define-template "jmaker-makefile-buffer-template"
                                   (jde-gen-read-template val)
                                   nil
                                   "Insert a Java Makefile in the current buffer."))
          (set-default sym val)))

(defcustom jmaker-meta-makefile-buffer-template
  '(
    "\"####\" 'n"
    "\"#### Java meta Makefile automatically generated by jmaker \""
    "(jmaker-version-number) 'n"
    "\"#### Creation date: \" (current-time-string) 'n"
    "\"####\" 'n"
    "'n"
    "\"#### Sub-Makefiles targets\" 'n"
    "(jmaker-sub-makefile-targets)"
    "'n"
    "\"#### Usage\" 'n"
    "\"help:\" 'n"
    "\"\\t@echo \\\"Usage: make [all|<single target>|help]\\\"\" 'n"
    "\"\\t@echo \\\"  all             - build all as needed (default)\\\"\" 'n"
    "\"\\t@echo \\\"  <single target> - build the given target as needed\\\"\" 'n"
    "\"\\t@echo \\\"  help            - display this help\\\"\" 'n"
    "'n"
    )
  "*Template for Java meta Makefile.
Setting this variable defines a template instantiation
command `jmaker-insert-meta-makefile', as a side-effect."
  :group 'jmaker
  :type '(repeat string)
  :set '(lambda (sym val)
          (defalias 'jmaker-insert-meta-makefile
            (tempo-define-template "jmaker-meta-makefile-buffer-template"
                                   (jde-gen-read-template val)
                                   nil
                                   "Insert a Java Makefile.meta in the current buffer."))
          (set-default sym val)))

(defun jmaker-customize ()
  "Show the jmaker customization global options panel."
  (interactive)
  (customize-group "jmaker"))

(defun jmaker-version-number ()
  "Returns jmaker version number."
  (string-match "[0123456789.]+" jmaker-version)
  (match-string 0 jmaker-version))

(defun jmaker-display-version ()
  "Displays jmaker version."
  (interactive)
  (message "Using 'jmaker' version %s." (jmaker-version-number)))

(defun jmaker-all-target ()
  "Returns a Makefile string for the `all' target. It is build with the name
of all `.java' files in the current directory. If the current directory contains
Sample1.java and Sample2.java `jmaker-all-target' returns:

all: \
  Sample1 \
  Sample2

"
  (concat "all:\t\\\n"
          (mapconcat '(lambda (name) (concat "\t" name))
                     (jmaker-get-java-names)
                     " \\\n")
          "\n"))

(defun jmaker-file-targets ()
  "Returns a Makefile string for java file targets. It is build with the name
of all `.java' files in the current directory. If the current directory contains
Sample1.java and Sample2.java `jmaker-file-targets' returns:

Sample1: Sample1.class
Sample2: Sample2.class

"
  (mapconcat '(lambda (name) (concat name ":\t" name ".class\n"))
             (jmaker-get-java-names)
             ""))

(defun jmaker-get-java-names ()
  "Returns a list of all java file names without extension in the current directory."
  (mapcar 'file-name-sans-extension
          (directory-files default-directory nil ".\\.java$")))

(defun jmaker-sub-makefile-targets ()
  "Returns a string which contains `Makefile' rules to recursively make all `Makefile'
files found in the subdirectories of `default-directory'. The result looks like the
following:

\"all: \
   test \
   test.essai1 \
   other

test: FORCE
  cd test; $(MAKE)

test.essai1: FORCE
  cd test/essai1; $(MAKE)

other: FORCE
  cd other; $(MAKE)

FORCE:
\"
"
  (let ((subdir-list (mapcar '(lambda (x) (directory-file-name (file-name-directory x)))
                              (jmaker-get-makefiles-in-tree default-directory))))
    (concat "all:\t\\\n"
            (mapconcat '(lambda (dir)
                          (concat "\t" (jmaker-convert-directory-to-package dir)))
                       subdir-list
                       " \\\n")
            "\n\n"
            (mapconcat '(lambda (dir)
                          (concat (jmaker-convert-directory-to-package dir)
                                  ":\tFORCE\n\tcd " dir "; $(MAKE)\n"))
                       subdir-list
                       "\n")
            "\nFORCE:\n"
            )
    )
  )

(defun jmaker-convert-directory-to-package (dir)
  "Converts the given directory to a Java package form
by replacing '/' by '.' and removing extra '/' at end."
  (mapconcat 'identity
             (split-string dir "/")
             "."))

(defun jmaker-get-makefiles-in-tree (root)
  "Returns the list of `Makefile' files found in the subdirectories of the
given `root' directory. Each file path is relative to the `root' directory."
  (message "Searching Makefiles, please wait...")
  (jmaker-get-makefiles-in-tree-aux root root))

(defun jmaker-get-makefiles-in-tree-aux (root dir)
  "Auxiliary function used by `jmaker-get-makefiles-in-tree'.
`root' is the top root directory. `dir' is a subdirectory in `root' tree."
  (let ((dir (file-name-as-directory dir)))
    (mapcan  '(lambda (f)
               (let ((rel-f (concat dir f)))
                 (unless (or (string= f ".") (string= f "..")
                             (not (file-directory-p rel-f)))
                   (nconc
                    (and (file-readable-p (concat rel-f "/Makefile"))
                         (list (concat (file-relative-name rel-f root) "/Makefile")))
                    (jmaker-get-makefiles-in-tree-aux root rel-f)))))
            (directory-files dir))))

(defun jmaker-generate-makefile ()
  "Generates a Java `Makefile' file which could be used to compile Java files
in the current directory.
If the file `Makefile' already exists the command requires confirmation
to overwrite it."
  (interactive)
  (let ((makefile (concat (file-name-as-directory default-directory) "Makefile")))
    (and (file-exists-p makefile)
         (or (y-or-n-p (format "File `%s' exists; overwrite? " makefile))
             (error "Canceled")))
    (with-current-buffer (find-file-noselect makefile)
      (makefile-mode)
      (erase-buffer)
      (jmaker-insert-makefile)
      (goto-char (point-min))
      (switch-to-buffer (current-buffer)))))

(defun jmaker-generate-meta-makefile (root)
  "Generates the file `root'/Makefile.meta which could be used to recursively make
all `Makefile' files found in the subdirectories of the given `root' directory.
If the file `root'/Makefile.meta already exists the command requires confirmation
to overwrite it."
  (interactive "DDirectory: ")
  (let ((makefile (concat (file-name-as-directory root) "Makefile.meta")))
    (and (file-exists-p makefile)
         (or (y-or-n-p (format "File `%s' exists; overwrite? " makefile))
             (error "Canceled")))
    (with-current-buffer (find-file-noselect makefile)
      (makefile-mode)
      (erase-buffer)
      (jmaker-insert-meta-makefile)
      (goto-char (point-min))
      (switch-to-buffer (current-buffer)))))

(defvar jmaker-menu 
  (list "JMaker"
        (list "New"
              ["Makefile..."       jmaker-generate-makefile t]
              ["Meta-makefile..."  jmaker-generate-meta-makefile t]
              )
        ["Options..."              jmaker-customize t]
	      ["-"                       ignore nil]
        (concat "jmaker " (jmaker-version-number))
        )
  "Menu for jmaker."
  )

(if (not jde-xemacsp)
    (easy-menu-do-define 'jmaker-menu 
                         jde-mode-map
                         "Menu for jmaker."
                         jmaker-menu)
)

(provide 'jmaker)

;;; Change History:

;;
;; $Log: jmaker.el,v $
;; Revision 1.10  1998/11/27 09:23:51  ebat311
;; Compatibility issue. jmaker now has its own menu item on
;; the menu bar (GNU Emacs only!). This avoid compatibility
;; problem when the JDE menu structure change (as in 2.1.2).
;;
;; Revision 1.9  1998/10/20 10:05:21  ebat311
;; Have run `untabify' on the whole source (follows a remark from ricky@siemensdc.com).
;;
;; Revision 1.8  1998/10/08 15:40:33  ebat311
;; Usage comments added related to the new meta Makefiles feature.
;;
;; Revision 1.7  1998/10/05 21:34:55  ebat311
;; `jmaker-generate-...' commands now generate file buffers and
;; require confirmation if the file already exists.
;;
;; Revision 1.6  1998/10/05 21:17:22  ebat311
;; Added super Makefile generation.
;; Some coding optimized and simplified.
;;
;; Revision 1.6  1998/09/29 22:34:45  ebat311
;; Outdated (renamed to 'C:\RCS\C\users\dpe\emacs\jmaker.el,v').
;;
;; Revision 1.5  1998/09/29 22:34:18  ebat311
;; New version-number management functions.
;;
;; Revision 1.4  1998/09/28 22:54:19  ebat311
;; Copyright notice updated.
;;
;; Revision 1.3  1998/09/28 22:18:58  ebat311
;; Fixed an error in function `jmaker-version-number' which did not display
;; the version number.
;;
;; Revision 1.2  1998/09/15 11:26:55  ebat311
;; Added support for Emacs 20.3.1.
;; From Paul Kinnucan: "Emacs 20.3.1 fixes a bug in the derive
;; mode macro that caused the jde-mode hook variable to be named
;; `jde-mode-hooks' (note plural) instead of `jde-mode-hook' (singular),
;; which is customary."
;;
;; Revision 1.1  1998/07/22 13:48:17  ebat311
;; Initial revision
;;
;;

;;; jmaker.el ends here.
